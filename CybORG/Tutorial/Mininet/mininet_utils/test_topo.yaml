############## Dictionary of a topology ##########
#
# My aim is that this will get generated via some DSML
# such as the one we can create in our model-driven
# engineering environment called WebGME (www.webgme.org)
# and so will generate information that is correct-by-construction.
# Right now, because it is being created manually, mistakes can still
# be made. For this triangle topology, things appear to work correctly.
#
#######################################
#
# Think of this YAML schema as the domain-specific language
# in which the topology is described. Thereafter, it is fed to a
# generic back-end orchestration middleware, which generates
# the desired topology.
#
topo:
  routers:
    - router: "r1"
      ip: "10.10.1.1/24"
      
    - router: "r2"
      ip: "10.20.1.1/24"

    - router: "r3"
      ip: "10.30.1.1/24"

  lans:  # We will assume interfaces numbered from 0 per LAN
            # We will use lan name as prefix of switches and hosts
    - name: "lan1"
      router: "r1"
      subnet: "10.10.1.0/24"
      hosts: 3

    - name: "lan2"
      router: "r1"
      subnet: "10.10.2.0/24"
      hosts: 2

    - name: "lan3"
      router: "r2"
      subnet: "10.20.1.0/24"
      hosts: 2

    - name: "lan4"
      router: "r3"
      subnet: "10.30.1.0/24"
      hosts: 2       # We could or could not have hosts here


  links:  # these are the router to router links where we just use the first addr
            # to the first endpoint and second to the second endpoint
            #
            # ep = end point. I didn't want to call it source and destination
    - ep1-router: "r1"
      ep2-router: "r2"
      subnet: "10.50.1.0/24"
      
    - ep1-router: "r1"
      ep2-router: "r3"
      subnet: "10.100.1.0/24"
      
    - ep1-router: "r2"
      ep2-router: "r3"
      subnet: "10.150.1.0/24"